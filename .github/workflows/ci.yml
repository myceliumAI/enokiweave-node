name: Enokiweave CI/CD

permissions: {}  # Default to no permissions

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  REGISTRY: docker.io
  REPOSITORY: myceliumai
  IMAGE_NAME: enokiweave

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
    outputs:
      core: ${{ steps.filter.outputs.core }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            core:
              - 'src/**'
              - 'Cargo.*'
              - '.github/workflows/**'
              - 'Dockerfile'

  check:
    needs: changes
    if: ${{ needs.changes.outputs.core == 'true' }}
    name: Check
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      contents: read
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Set up cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install LMDB
        run: sudo apt-get update && sudo apt-get install -y liblmdb-dev

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run cargo clippy
        run: cargo clippy -- -D warnings

  test:
    needs: changes
    if: ${{ needs.changes.outputs.core == 'true' }}
    name: Test Suite
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Set up cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install LMDB
        run: sudo apt-get update && sudo apt-get install -y liblmdb-dev

      - name: Run cargo test
        run: cargo test

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,secret,config'
      - uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'

  build:
    needs: [changes, security, check, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Check if should build
        id: should_build
        run: |
          if [[ 
            "${{ github.event_name }}" == "push" && 
            "${{ needs.changes.outputs.core }}" == "true" 
          ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
          fi

      - uses: actions/checkout@v4
        if: steps.should_build.outputs.run == 'true'

      - uses: docker/setup-buildx-action@v3
        if: steps.should_build.outputs.run == 'true'

      - uses: docker/login-action@v3
        if: steps.should_build.outputs.run == 'true'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/metadata-action@v5
        if: steps.should_build.outputs.run == 'true'
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=long

      - uses: docker/build-push-action@v5
        if: steps.should_build.outputs.run == 'true'
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max 